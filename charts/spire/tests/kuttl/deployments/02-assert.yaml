apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
    meta.helm.sh/release-name: spire
    meta.helm.sh/release-namespace: spire
  name: spire-server
  namespace: spire
spec:
  replicas: 1
  serviceName: spire
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
      labels:
        app.kubernetes.io/name: spire-server
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - spire-server
                topologyKey: kubernetes.io/hostname
              weight: 1
      containers:
        - args:
            - -config
            - /run/spire/server/spire-server.conf
          env:
            - name: connectionPooler
              value: "false"
          image: gcr.io/spiffe-io/spire-server:0.12.2
          imagePullPolicy: IfNotPresent
          lifecycle:
            postStart:
              exec:
                command:
                  - /bin/sh
                  - /run/spire/config/register
          livenessProbe:
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: grpc
            timeoutSeconds: 1
          name: spire-server
          ports:
            - containerPort: 8081
              name: grpc
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: grpc
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /run/spire/config
              name: spire-config
              readOnly: true
            - mountPath: /run/spire/server
              name: spire-server
            - mountPath: /run/spire/db-creds
              name: spire-db-creds
              readOnly: true
            - mountPath: /tmp
              name: spire-shared-socket
            - mountPath: /run/spire/data
              name: spire-data
        - env:
            - name: SPIRE_DOMAIN
              value: shasta
            - name: COMPUTE_ENTRY
              value: /compute/tenant1
            - name: NCN_ENTRY
              value: /ncn/tenant1
            - name: NCN_CLUSTER_ENTRY
              value: /ncn
            - name: COMPUTE_CLUSTER_ENTRY
              value: /compute
            - name: TTL
              value: "10800"
            - name: ENABLE_XNAME_WORKLOADS
              value: "true"
          imagePullPolicy: IfNotPresent
          name: spire-registration-server
          ports:
            - containerPort: 54440
              name: registration
              protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /tmp
              name: spire-shared-socket
            - mountPath: /tls
              name: spire-tokens-tls
              readOnly: true
            - mountPath: /workloads
              name: spire-workloads
              readOnly: true
      dnsPolicy: ClusterFirst
      initContainers:
        - args:
            - -t
            - "30"
            - spire-postgres:5432
          image: arti.dev.cray.com/third-party-docker-stable-local/sdlc-ops/wait-for-it:20210322
          imagePullPolicy: IfNotPresent
          name: init
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - command:
            - sh
            - -c
            - sed -e "s/POSTGRESUSER/$(cat /run/spire/db-creds/username)/" -e "s/POSTGRESPASS/$(cat /run/spire/db-creds/password)/" < /run/spire/config/spire-server.conf > /run/spire/server/spire-server.conf
          image: artifactory.algol60.net/docker.io/alpine:3.11.5
          imagePullPolicy: IfNotPresent
          name: init2
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /run/spire/config
              name: spire-config
              readOnly: true
            - mountPath: /run/spire/server
              name: spire-server
            - mountPath: /run/spire/db-creds
              name: spire-db-creds
              readOnly: true
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccount: spire-server
      serviceAccountName: spire-server
      shareProcessNamespace: true
      terminationGracePeriodSeconds: 30
      volumes:
        - configMap:
            defaultMode: 420
            name: spire-server-config
          name: spire-config
        - emptyDir: {}
          name: spire-server
        - hostPath:
            path: /run/spire/vshastaio/sockets/shared
            type: DirectoryOrCreate
          name: spire-shared-socket
        - name: spire-db-creds
          secret:
            defaultMode: 420
            secretName: spire.spire-postgres.credentials
        - name: spire-tokens-tls
          secret:
            defaultMode: 420
            secretName: spire-tokens-tls
        - configMap:
            defaultMode: 420
            name: spire-workloads
          name: spire-workloads
  updateStrategy:
    rollingUpdate:
      partition: 0
    type: RollingUpdate
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: spire-data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
        volumeMode: Filesystem
status:
  readyReplicas: 1
