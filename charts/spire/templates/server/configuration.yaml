{{/*
MIT License

(C) Copyright 2022-2023 Hewlett Packard Enterprise Development LP

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the "Software"),
to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.
*/}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "spire.fullname" . }}-server-config
  labels:
    app.kubernetes.io/name: {{ template "spire.name" . }}
    {{- include "spire.common-labels" . | nindent 4 }}
data:
  spire-server.conf: |-
    server {
      ratelimit = {
        attestation = false
        signing = false
      }
      bind_address = "0.0.0.0"
      bind_port = "{{ .Values.server.port }}"
      trust_domain = "{{ .Values.trustDomain }}"
      data_dir = "/run/spire/data"
      log_level = "{{ .Values.server.logLevel }}"
      ca_ttl = "{{ .Values.server.caTTL }}"
      default_svid_ttl = "{{ .Values.server.svidDefaultTTL }}"
      # TODO: Do we need this? Will istio handle EC?
      ca_key_type = "rsa-4096"
      jwt_issuer = "{{ .Values.server.jwtIssuer }}"
    }

    telemetry {
      Prometheus {
        # host: Prometheus server host.
        # host = ""

        # port: Prometheus server port.
        port = 9988
      }
    }

    plugins {
      UpstreamAuthority "disk" { plugin_data {
              cert_file_path = "/run/spire/tls/tls.crt"
              key_file_path = "/run/spire/tls/tls.key"
              bundle_file_path = "/run/spire/tls/ca.crt"
          }
      }

      DataStore "sql" {
        plugin_data {
          database_type = "postgres"
          {{- if index .Values "cray-service" "sqlCluster" "connectionPooler" "enabled" }}
          connection_string = "dbname={{ .Values.server.database }} user=POSTGRESUSER password=POSTGRESPASS host={{ include "spire.fullname" . }}-postgres-pooler.{{ .Release.Namespace }}.svc.cluster.local"
          {{- else }}
          connection_string = "dbname={{ .Values.server.database }} user=POSTGRESUSER password=POSTGRESPASS host={{ include "spire.fullname" . }}-postgres.{{ .Release.Namespace }}.svc.cluster.local"
          {{- end }}
        }
      }

      NodeAttestor "k8s_sat" {
        plugin_data {
          clusters = {
            "{{ .Values.trustDomain }}" = {
              use_token_review_api_validation = true
              service_account_allow_list = ["{{ .Release.Namespace }}:{{ include "spire.fullname" . }}-agent"]
            }
          }
        }
      }

      KeyManager "disk" {
        plugin_data {
          keys_path = "/run/spire/data/keys.json"
        }
      }

      Notifier "k8sbundle" {
        plugin_data {
          namespace = "{{ .Release.Namespace }}"
        }
      }
    }
  register: |-
    #!/bin/sh

    # This is an interim solution until we have a better way for seeding all
    # the workload and node attestation entries. For now, this allows the
    # JWKS provider to work and that's it

    create() {
      /opt/spire/bin/spire-server entry create $@ || echo "Entry creation failed: $@"
    }


    create_if_new () {
      type=$1
      workload=$2
      agentPath=$3
      ttl=$4

      if ! ./bin/spire-server entry show -spiffeID "spiffe://shasta/${type}/workload/${workload}" | grep -q "spiffe://shasta/${type}/workload/${workload}"; then
        if [ "$ttl" ]; then
          ./bin/spire-server entry create \
            -parentID spiffe://{{ .Values.trustDomain }}/${type} \
            -spiffeID spiffe://{{ .Values.trustDomain }}/${type}/workload/${workload} \
            -selector unix:uid:0 \
            -selector unix:gid:0 \
            -selector unix:path:${agentPath} \
            -ttl ${ttl} || echo "Entry creation failed: $@"
        else
          ./bin/spire-server entry create \
            -parentID spiffe://{{ .Values.trustDomain }}/${type} \
            -spiffeID spiffe://{{ .Values.trustDomain }}/${type}/workload/${workload} \
            -selector unix:uid:0 \
            -selector unix:gid:0 \
            -selector unix:path:${agentPath} || echo "Entry creation failed: $@"
        fi
      else
        echo "Entry already exists: $@"
      fi
    }

    # Wait for the socket to appear
    while [ ! -S /tmp/spire-server/private/api.sock ]; do
      echo "Waiting for registration socket"
      sleep 3
    done

    # Wait for the server to be healthy
    while ! /opt/spire/bin/spire-server healthcheck; do
      echo "Waiting for spire-server to be healthy"
      sleep 3
    done

    if /opt/spire/bin/spire-server entry show | grep -q "Found 0"; then
      create \
        -node \
        -spiffeID spiffe://{{ .Values.trustDomain }}/cluster \
        -selector k8s_sat:cluster:{{ .Values.trustDomain }} \

      create \
        -parentID spiffe://{{ .Values.trustDomain }}/cluster \
        -spiffeID spiffe://{{ .Values.trustDomain }}/spire-jwks \
        -selector k8s:ns:{{ .Release.Namespace }} \
        -selector k8s:sa:spire-jwks \
        -selector k8s:pod-label:app.kubernetes.io/name:spire-jwks \
        -selector k8s:container-name:spire-jwks
    fi

    {{- if not .Values.server.tokenService.enableXNameWorkloads }}

    create_if_new compute bos-reporter /usr/bin/bos-reporter-spire-agent
    create_if_new compute cfs-state-reporter /usr/bin/cfs-state-reporter-spire-agent
    create_if_new compute ckdump /usr/bin/ckdump-spire-agent 864000
    create_if_new compute ckdump_helper /usr/sbin/ckdump_helper 864000
    create_if_new compute cpsmount /usr/bin/cpsmount-spire-agent
    create_if_new compute cpsmount_helper /opt/cray/cps-utils/bin/cpsmount_helper
    create_if_new compute dvs-hmi /usr/bin/dvs-hmi-spire-agent
    create_if_new compute dvs-map /usr/bin/dvs-map-spire-agent
    create_if_new compute heartbeat /usr/bin/heartbeat-spire-agent
    create_if_new compute orca /usr/bin/orca-spire-agent
    create_if_new compute wlm /usr/bin/wlm-spire-agent

    create_if_new ncn bos-reporter /usr/bin/bos-reporter-spire-agent
    create_if_new ncn cfs-state-reporter /usr/bin/cfs-state-reporter-spire-agent
    create_if_new ncn cpsmount /usr/bin/cpsmount-spire-agent
    create_if_new ncn cpsmount_helper /opt/cray/cps-utils/bin/cpsmount_helper
    create_if_new ncn dvs-hmi /usr/bin/dvs-hmi-spire-agent
    create_if_new ncn dvs-map /usr/bin/dvs-map-spire-agent
    create_if_new ncn heartbeat /usr/bin/heartbeat-spire-agent
    create_if_new ncn orca /usr/bin/orca-spire-agent

    create_if_new storage cfs-state-reporter /usr/bin/cfs-state-reporter-spire-agent
    create_if_new storage heartbeat /usr/bin/heartbeat-spire-agent

    create_if_new uan bos-reporter /usr/bin/bos-reporter-spire-agent
    create_if_new uan cfs-state-reporter /usr/bin/cfs-state-reporter-spire-agent
    create_if_new uan ckdump /usr/bin/ckdump-spire-agent 864000
    create_if_new uan ckdump_helper /usr/sbin/ckdump_helper 864000
    create_if_new uan cpsmount /usr/bin/cpsmount-spire-agent
    create_if_new uan cpsmount_helper /opt/cray/cps-utils/bin/cpsmount_helper
    create_if_new uan dvs-hmi /usr/bin/dvs-hmi-spire-agent
    create_if_new uan dvs-map /usr/bin/dvs-map-spire-agent
    create_if_new uan heartbeat /usr/bin/heartbeat-spire-agent
    create_if_new uan orca /usr/bin/orca-spire-agent
    {{- end }}
    exit 0
